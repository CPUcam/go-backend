0x050:
0x050:  6277                  # andq %rdi, %rdi
0x052:  7108b0000000000000    # jle .L4
0x05b:  30F10100000000000000  # irmovq $1, %rcx
0x065:  30F00000000000000000  # irmovq $0, %rax
0x06f:  30F20100000000000000  # irmovq $1, %rdx

0x079:  20760000000000000000  # rrmovq %rdi, %rsi
0x083:  6020                  # addq %rdx, %rax
0x085:  6012                  # addq %rcx, %rdx
0x087:  6126                  # subq %rdx, %rsi
0x089:  750790000000000000    # jge .L3
0x08a:  90                    # ret

0x08b:  30F00000000000000000  # irmovq $0, %rax
0x095:  90                    # ret


2.
proc:
  irmovq $0, %rax             # Move value 0 into register %rax
  irmovq $1, %r9              # Move value 1 into register %r9
  rrmovq %rdi, %r8            # Move value that %rdi points to into register %r8
  andq %r8, %r8               # Test value in register %r8
  je done                     # If 0, goto done
loop:
  addq %rsi, %rax             # Add the values held in %rsi and %rax, and move
                              # the new value into register %rax
  subq %r9, %r8               # Subtract the value held in %r8 by value in %r9
                              # and move new vlaue into register %r8
  andq %r8, %r8               # Test value in register %r8
  jne loop                    # If 0, goto loop
done:
  ret                         # Return


3.

The program takes two non-negative integers as arguments and returns either
the first argument or 0.

4.

function(c, d)
a = 0
b = 1
r8 = c
if (r8 = 0) return 0
while (r8 !=) {
  a += d
  r8 -= b
} return r8;


5.


0x100: 30F00000000000000000 # irmovq $0, %rax
0x10a: 30F90100000000000000 # irmovq $1, %r9
0x114: 20780000000000000000 # rrmovq %rdi, %r8
0x11e: 6288                 # andq %r8, %r8
0x120: 73                   # je done

0x129: 6060                 # addq %rsi, %rax
0x12b: 6199                 # subq %r9, %r9
0x12d: 6288                 # andq %r8, %r8
0x12f: 74                   # jne loop

0x138: 90                   # ret


6.

(A & B) | ((B & C) & (B | C))
